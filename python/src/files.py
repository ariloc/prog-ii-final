## @file files.py
#  @author Ariel Leonardo Fideleff

## Path of the folder where sanitized sentences from people are stored.
#  Each person's texts should be @c .txt files named after the person.
# 
#  <b>This path must point to a folder in the same directory as the executable.</b>
INPUTS_PATH = "Entradas"

## Path of a folder containing incomplete sentences from people.
#  Each file in the folder should be a @c .txt named after the person who supposedly wrote 
#  the sentences.
# 
#  <b>This path must point to a folder in the same directory as the executable.</b>
SENTENCES_PATH = "Frases"

## Path of the folder where the predicted sentences for a person would be stored.
#  The resulting files would be named after the person and have a @c .txt extension.
# 
#  <b>This path must point to a folder in the same directory as the executable.</b>
OUTPUTS_PATH = "Salidas"

# --- FILE FUNCTIONS ---

## Reads all the lines stored in the file located at @p path into an list, removing the endline @c \\n
#  character at the end of each line.
def path_readlines_no_endline(path: str) -> list[str]:
    try:
        file = open(path,"r")
    except:
        print(f'There was an error reading from {path}.')
        print("File may not exist or you may not have permission to read it.")
        exit(1)

    lines = file.read().splitlines()
    file.close()
    return lines

## Writes all the lines stored in @p lines to a file located at @p path, including an endline @c \\n
#  character at the end of each line.
def path_writelines_newline(lines: list[str], path: str):
    try:
        file = open(path,"w")
    except:
        print(f'There was an error writing to {path}.')
        print("Check the path exists and that you have permission to write in it.")
        exit(1)

    if lines: # Only append newline if there's at least one sentence to write
        file.writelines('\n'.join(lines) + '\n')
    file.close()

# --- PATHS ---

## Returns the path to the sanitized input sentences file from @p personName.
def inputs_path(personName: str) -> str:
    return INPUTS_PATH + '/' + personName + '.txt'

## Returns the path to the sentences with a missing word to be predicted for @p personName.
def sentences_path(personName: str) -> str:
    return SENTENCES_PATH + '/' + personName + '.txt'

## Returns the path where the predicted sentences for @p personName will be written.
def outputs_path(personName: str) -> str:
    return OUTPUTS_PATH + '/' + personName + '.txt'


# --- SCRIPT-SPECIFIC FILE OPERATIONS ---

## Reads the input sentences generated by the C program from @p personName.
#  @see @link python.src.files.inputs_path() inputs_path() @endlink
def read_input_sentences(personName: str) -> list[str]:
    return path_readlines_no_endline(inputs_path(personName))

## Reads the incomplete sentences to be predicted for @p personName.
#  @see @link python.src.files.sentences_path() sentences_path() @endlink
def read_incomplete_sentences(personName: str) -> list[str]:
    return path_readlines_no_endline(sentences_path(personName))

## Writes the predicted @p sentences for @p personName to its respective path.
#  @see @link python.src.files.outputs_path() outputs_path() @endlink
def write_sentences(sentences: list[str], personName: str):
    path_writelines_newline(sentences, outputs_path(personName))
